From f4a82be310c0cd828ad0f4fe4f0863f05ff04008 Mon Sep 17 00:00:00 2001
From: elros34 <elros34@users.noreply.github.com>
Date: Wed, 5 Aug 2020 01:09:55 +0200
Subject: [PATCH 7/8] Some battery/usb changes

---
 drivers/input/init_ctp.c                    | 18 +++------
 drivers/power/axp_power/axp22-board.c       | 11 ++++--
 drivers/power/axp_power/axp22-sply.c        | 35 +++++++++++++++---
 drivers/rtc/rtc-sun6i.c                     |  4 +-
 drivers/usb/gadget/android.c                |  2 +-
 drivers/usb/sun6i_usb/manager/usb_hw_scan.c | 41 +++++++++++++++------
 6 files changed, 74 insertions(+), 37 deletions(-)

diff --git a/drivers/input/init_ctp.c b/drivers/input/init_ctp.c
index 370416d8..43c06cd2 100755
--- a/drivers/input/init_ctp.c
+++ b/drivers/input/init_ctp.c
@@ -332,28 +332,20 @@ int ctp_wakeup(int status,int ms)
         if(status == 0){
                 
                 if(ms == 0) {
-                         __gpio_set_value(config_info.wakeup_gpio_number, 1);
+                        __gpio_set_value(config_info.wakeup_gpio_number, 0);
                 }else {
-                        __gpio_set_value(config_info.wakeup_gpio_number, 1);
+                        __gpio_set_value(config_info.wakeup_gpio_number, 0);
                         msleep(ms);
                         __gpio_set_value(config_info.wakeup_gpio_number, 1);
                 }
         }
         if(status == 1){
                 if(ms == 0) {
-                         __gpio_set_value(config_info.wakeup_gpio_number, 1);
-						 msleep(100);
-						 __gpio_set_value(config_info.wakeup_gpio_number, 1);
-                         msleep(100);
-						 __gpio_set_value(config_info.wakeup_gpio_number, 1);
-                         msleep(100);
-						 __gpio_set_value(config_info.wakeup_gpio_number, 1);
-                         msleep(100);
-						 __gpio_set_value(config_info.wakeup_gpio_number, 1);
+                        __gpio_set_value(config_info.wakeup_gpio_number, 1);
                 }else {
                         __gpio_set_value(config_info.wakeup_gpio_number, 1); 
                         msleep(ms);
-                        __gpio_set_value(config_info.wakeup_gpio_number, 1); 
+                        __gpio_set_value(config_info.wakeup_gpio_number, 0);
                 }      
         }
         msleep(5);  
@@ -431,4 +423,4 @@ module_param_named(debug_mask,debug_mask,int,S_IRUGO | S_IWUSR | S_IWGRP);
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("ctp init");
 MODULE_AUTHOR("Olina yin");
-MODULE_ALIAS("platform:AW");
\ No newline at end of file
+MODULE_ALIAS("platform:AW");
diff --git a/drivers/power/axp_power/axp22-board.c b/drivers/power/axp_power/axp22-board.c
index 3eba3328..bbd5d662 100755
--- a/drivers/power/axp_power/axp22-board.c
+++ b/drivers/power/axp_power/axp22-board.c
@@ -620,7 +620,7 @@ static struct axp_funcdev_info axp_regldevs[] = {
 		.platform_data = &axp_regl_init_data[vcc_DCDC5],
 	}, {
 		.name = "axp22-regulator",
-		.id = AXP22_ID_LDOIO0,
+        .id = AXP22_ID_LDOIO0,
 		.platform_data = &axp_regl_init_data[vcc_ldoio0],
 	}, {
 		.name = "axp22-regulator",
@@ -732,11 +732,12 @@ static int __init axp22_board_init(void)
         }
         
         ret = axp_script_parser_fetch("pmu_para", "pmu_battery_cap", &pmu_battery_cap, sizeof(int));
-        if (ret)
+        if (ret || (pmu_battery_cap == 0))
         {
  //           printk("axp driver uning configuration failed(%d)\n", __LINE__);
             pmu_battery_cap = 4000;
         }
+        pmu_battery_cap = pmu_battery_cap * 1000;
         
         ret = axp_script_parser_fetch("pmu_para", "pmu_batdeten", &pmu_batdeten, sizeof(int));
         if (ret)
@@ -1078,13 +1079,16 @@ static int __init axp22_board_init(void)
 //            printk("axp driver uning configuration failed(%d)\n", __LINE__);
             pmu_pwroff_vol = 3300;
         }
+        pmu_pwroff_vol = pmu_pwroff_vol * 1000;
+
         ret = axp_script_parser_fetch("pmu_para", "pmu_pwron_vol", &pmu_pwron_vol, sizeof(int));
         if (ret)
         {
 //            printk("axp driver uning configuration failed(%d)\n", __LINE__);
             pmu_pwron_vol = 2900;
         }
-        
+        pmu_pwron_vol = pmu_pwron_vol * 1000;
+
 				ret = axp_script_parser_fetch("power_sply", "dcdc1_vol", &dcdc1_vol, sizeof(int));
 				if (ret)
 				{
@@ -1414,6 +1418,7 @@ static int __init axp22_board_init(void)
         battery_data.voltage_max_design = pmu_init_chgvol;
         battery_data.voltage_min_design = pmu_pwroff_vol;
         battery_data.energy_full_design = pmu_battery_cap;
+        battery_data.charge_full_design = pmu_battery_cap;
         axp_sply_init_data.chgcur = pmu_runtime_chgcur;
         axp_sply_init_data.chgvol = pmu_init_chgvol;
         axp_sply_init_data.chgend = pmu_init_chgend_rate;
diff --git a/drivers/power/axp_power/axp22-sply.c b/drivers/power/axp_power/axp22-sply.c
index f0f399ae..18adebd8 100755
--- a/drivers/power/axp_power/axp22-sply.c
+++ b/drivers/power/axp_power/axp22-sply.c
@@ -63,6 +63,23 @@ int pmu_usbcurnew = 0;
 int axp_usbcurflag = 0;
 int axp_usbvolflag = 0;
 
+void apx_set_usb_connection(int connection_type)
+{
+    if(axp_debug)
+        DBG_PSY_MSG("[AXP]: %s: connection type %d\n", __func__, connection_type);
+    if(axp_charger == NULL)
+    {
+        DBG_PSY_MSG("apx_set_usb_connection failure!\n");
+        return;
+    }
+    if (connection_type != axp_charger->usb.type)
+    {
+        axp_charger->usb.type = connection_type;
+        power_supply_changed(&axp_charger->usb);
+    }
+}
+EXPORT_SYMBOL_GPL(apx_set_usb_connection);
+
 //hanbiao add for tp
 #if 1
 void  set_aldo1(void)
@@ -535,7 +552,7 @@ static enum power_supply_property axp_battery_props[] = {
   POWER_SUPPLY_PROP_VOLTAGE_MIN_DESIGN,
   POWER_SUPPLY_PROP_VOLTAGE_NOW,
   POWER_SUPPLY_PROP_CURRENT_NOW,
-  //POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN,
+  POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN,
   //POWER_SUPPLY_PROP_CHARGE_FULL,
   POWER_SUPPLY_PROP_ENERGY_FULL_DESIGN,
   POWER_SUPPLY_PROP_CAPACITY,
@@ -558,6 +575,7 @@ static enum power_supply_property axp_usb_props[] = {
   POWER_SUPPLY_PROP_ONLINE,
   POWER_SUPPLY_PROP_VOLTAGE_NOW,
   POWER_SUPPLY_PROP_CURRENT_NOW,
+  POWER_SUPPLY_PROP_TYPE,
 };
 
 static void axp_battery_check_status(struct axp_charger *charger,
@@ -626,11 +644,11 @@ static int axp_battery_get_property(struct power_supply *psy,
   case POWER_SUPPLY_PROP_MODEL_NAME:
     val->strval = charger->batt.name;
     break;
-/*  case POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN:
+  case POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN:
   case POWER_SUPPLY_PROP_CHARGE_FULL:
     val->intval = charger->battery_info->charge_full_design;
         break;
-*/
+
   case POWER_SUPPLY_PROP_ENERGY_FULL_DESIGN:
     val->intval = charger->battery_info->energy_full_design;
   //  DBG_PSY_MSG("POWER_SUPPLY_PROP_ENERGY_FULL_DESIGN:%d\n",val->intval);
@@ -751,8 +769,10 @@ static void axp_change(struct axp_charger *charger)
 	axp_clr_bits(charger->master, AXP22_CHARGE_VBUS, 0x02);
 	axp_set_bits(charger->master, AXP22_CHARGE_VBUS, 0x01);
 	schedule_delayed_work(&usbwork, msecs_to_jiffies(5* 1000));
-  flag_state_change = 1;
-  power_supply_changed(&charger->batt);
+    flag_state_change = 1;
+    power_supply_changed(&charger->usb);
+    power_supply_changed(&charger->ac);
+    power_supply_changed(&charger->batt);
 }
 
 static void axp_presslong(struct axp_charger *charger)
@@ -935,7 +955,7 @@ static void axp_battery_setup_psy(struct axp_charger *charger)
   ac->num_properties = ARRAY_SIZE(axp_ac_props);
 
   usb->name = "usb";
-  usb->type = POWER_SUPPLY_TYPE_USB;
+  usb->type = POWER_SUPPLY_TYPE_UNKNOWN;
   usb->get_property = axp_usb_get_property;
 
   usb->supplied_to = supply_list,
@@ -2055,6 +2075,9 @@ static int axp_battery_probe(struct platform_device *pdev)
 	INIT_DELAYED_WORK(&usbwork, axp_usb);
 	schedule_delayed_work(&usbwork, msecs_to_jiffies(7 * 1000));
 
+    power_supply_changed(&charger->usb);
+    power_supply_changed(&charger->ac);
+
     /* register axp interrupt notifier */
     charger->nb.notifier_call = axp_battery_event;
     ret = axp_register_notifier(charger->master, &charger->nb, AXP22_NOTIFIER_ON);
diff --git a/drivers/rtc/rtc-sun6i.c b/drivers/rtc/rtc-sun6i.c
index e8bd575e..2b6a310e 100755
--- a/drivers/rtc/rtc-sun6i.c
+++ b/drivers/rtc/rtc-sun6i.c
@@ -170,7 +170,7 @@ static int sun6i_rtc_gettime(struct device *dev, struct rtc_time *rtc_tm)
     }
 
 retry_get_time:
-	_dev_info(dev,"sun6i_rtc_gettime\n");
+	dev_notice(dev,"sun6i_rtc_gettime\n");
     /*first to get the date, then time, because the sec turn to 0 will effect the date;*/
 	date_tmp = readl(base + SUN6I_RTC_DATE_REG);
 	time_tmp = readl(base + SUN6I_RTC_TIME_REG);
@@ -194,7 +194,7 @@ retry_get_time:
 
 	rtc_tm->tm_year += 70;
 	rtc_tm->tm_mon  -= 1;
-	_dev_info(dev,"read time %d-%d-%d %d:%d:%d\n",
+	dev_notice(dev,"read time %d-%d-%d %d:%d:%d\n",
 	       rtc_tm->tm_year + 1900, rtc_tm->tm_mon + 1, rtc_tm->tm_mday,
 	       rtc_tm->tm_hour, rtc_tm->tm_min, rtc_tm->tm_sec);
 
diff --git a/drivers/usb/gadget/android.c b/drivers/usb/gadget/android.c
index d561641a..ade152d9 100755
--- a/drivers/usb/gadget/android.c
+++ b/drivers/usb/gadget/android.c
@@ -203,7 +203,7 @@ static int android_enable(struct android_dev *dev)
     int err = 0;
 
 	if (WARN_ON(!dev->disable_depth))
-        return err;
+        return -1;
 
 	if (--dev->disable_depth == 0) {
         err = usb_add_config(cdev, &android_config_driver,
diff --git a/drivers/usb/sun6i_usb/manager/usb_hw_scan.c b/drivers/usb/sun6i_usb/manager/usb_hw_scan.c
index 68c9b670..23f21f4b 100755
--- a/drivers/usb/sun6i_usb/manager/usb_hw_scan.c
+++ b/drivers/usb/sun6i_usb/manager/usb_hw_scan.c
@@ -44,6 +44,7 @@
 #include <mach/irqs.h>
 #include <linux/gpio.h>
 #include <mach/platform.h>
+#include <linux/power_supply.h>
 
 #include  "../include/sw_usb_config.h"
 #include  "usb_manager.h"
@@ -52,9 +53,10 @@
 
 static struct usb_scan_info g_usb_scan_info;
 extern int axp_usb_det(void);
-#ifdef CONFIG_USB_SW_SUN6I_USB0_OTG
-extern atomic_t thread_suspend_flag;
-#endif
+extern void apx_set_usb_connection(int connection_type);
+#ifdef CONFIG_USB_SW_SUN6I_USB0_OTG
+extern atomic_t thread_suspend_flag;
+#endif
 int device_insmod_delay = 0;
 void (*__usb_hw_scan) (struct usb_scan_info *);
 
@@ -313,7 +315,7 @@ static void do_vbus0_id0(struct usb_scan_info *info)
 	switch(role){
 		case USB_ROLE_NULL:
 			/* delay for vbus is stably */
-			if(atomic_read(&thread_suspend_flag)){
+			if(atomic_read(&thread_suspend_flag)){
 				break;
 			}
 			if(info->host_insmod_delay < USB_SCAN_INSMOD_HOST_DRIVER_DELAY){
@@ -332,7 +334,7 @@ static void do_vbus0_id0(struct usb_scan_info *info)
 
 		case USB_ROLE_DEVICE:
 			/* rmmod usb device */
-			if(atomic_read(&thread_suspend_flag)){
+			if(atomic_read(&thread_suspend_flag)){
 				break;
 			}
 			hw_rmmod_usb_device();
@@ -377,14 +379,14 @@ static void do_vbus0_id1(struct usb_scan_info *info)
 		break;
 
 		case USB_ROLE_HOST:
-			if(atomic_read(&thread_suspend_flag)){
+			if(atomic_read(&thread_suspend_flag)){
 				break;
 			}
 			hw_rmmod_usb_host();
 		break;
 
 		case USB_ROLE_DEVICE:
-			if(atomic_read(&thread_suspend_flag)){
+			if(atomic_read(&thread_suspend_flag)){
 				break;
 			}
 			hw_rmmod_usb_device();
@@ -425,7 +427,7 @@ static void do_vbus1_id0(struct usb_scan_info *info)
 	switch(role){
 		case USB_ROLE_NULL:
 
-			if(atomic_read(&thread_suspend_flag)){
+			if(atomic_read(&thread_suspend_flag)){
 				break;
 			}
 			/* delay for vbus is stably */
@@ -443,7 +445,7 @@ static void do_vbus1_id0(struct usb_scan_info *info)
 		break;
 
 		case USB_ROLE_DEVICE:
-			if(atomic_read(&thread_suspend_flag)){
+			if(atomic_read(&thread_suspend_flag)){
 				break;
 			}
 			hw_rmmod_usb_device();
@@ -489,7 +491,7 @@ static void do_vbus1_id1(struct usb_scan_info *info)
 		case USB_ROLE_NULL:
 #ifndef  SW_USB_FPGA
 			if(get_dp_dm_status(info) == 0x00){
-				if(atomic_read(&thread_suspend_flag)){
+				if(atomic_read(&thread_suspend_flag)){
 					break;
 				}
     			/* delay for vbus is stably */
@@ -507,7 +509,7 @@ static void do_vbus1_id1(struct usb_scan_info *info)
 		break;
 
 		case USB_ROLE_HOST:
-			if(atomic_read(&thread_suspend_flag)){
+			if(atomic_read(&thread_suspend_flag)){
 				break;
 			}
 			hw_rmmod_usb_host();
@@ -591,15 +593,30 @@ static __u32 get_vbus_id_state(struct usb_scan_info *info)
 */
 static void vbus_id_hw_scan(struct usb_scan_info *info)
 {
+    static __u32 vbus_id_state_old = 0;
 	__u32 vbus_id_state = 0;
 
 	vbus_id_state = get_vbus_id_state(info);
 
 	if(g_msc_read_debug)
 		printk("vbus_id=%d,role=%d,suspend_flag=%d,host_delay=%d,dp_dm=%d,dev_delay=%d\n",
-				vbus_id_state, get_usb_role(), atomic_read(&thread_suspend_flag),
+				vbus_id_state, get_usb_role(), atomic_read(&thread_suspend_flag),
 				info->host_insmod_delay, get_dp_dm_status(info), device_insmod_delay);
 
+    if (vbus_id_state_old != vbus_id_state) {
+        vbus_id_state_old = vbus_id_state;
+        if (vbus_id_state == 1) { // // disconnected
+            apx_set_usb_connection(POWER_SUPPLY_TYPE_UNKNOWN);
+        } else if (vbus_id_state == 2) { // host connected
+        } else if (vbus_id_state == 3) { // slave connected
+            if (get_dp_dm_status(info) == 3) { // charger
+                apx_set_usb_connection(POWER_SUPPLY_TYPE_USB_DCP);
+            } else { // cable
+                apx_set_usb_connection(POWER_SUPPLY_TYPE_USB);
+            }
+        }
+    }
+
 	switch(vbus_id_state){
 		case  0x00:
 			do_vbus0_id0(info);
-- 
2.25.1

